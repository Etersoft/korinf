#!/bin/sh -x
##
#  Korinf project
#
#  Publish product functions
#
#  Copyright (c) Etersoft <http://etersoft.ru> 2006, 2007, 2009
#  Copyright (c) Vitaly Lipatov <lav@etersoft.ru> 2006, 2007, 2009
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU Affero General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.

#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Affero General Public License for more details.

#  You should have received a copy of the GNU Affero General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
##

# arg: src.rpm target_file
# Check if target is older then src.rpm and build if needed

# is not recommended include directly due message function intersection
#kormod korinf

kormod check_integrity

# do not used, obsoleted
check_and_refresh_package()
{
	# Etersoft/WINE@Etersoft/last/WINE/SUSE/12
	local TARGETPATH="$1"
	# Etersoft/WINE@Etersoft/last/sources
	local SOURCEPATH="$(readlink -f "$TARGETPATH/$2")"
	# Etersoft/WINE@Etersoft
	local PUBPATH="$(readlink -f "$SOURCEPATH/../..")"
	# WINE
	local PUBPART="$(basename $(readlink -f "$TARGETPATH/../.."))"
	# haspd
	local BUILDNAME=$3

	return 1
	# FIXMEP get_..._package always returns true
	#local SRCRPM=$(get_src_package $BUILDNAME || fatal "Source package for $BUILDNAME is not found")
	#local BINPKG=$(get_bin_package $BUILDNAME || fatal "Binary package $BUILDNAME is not found")

	# if binary is newer than src.rpm, return OK
	test $BINPKG -nt $SRCRPM && return 0

	#build_project $PUBPATH $BUILDNAME $PUBPART $DIST $WINENUMVERSION && return 0
	$AROBOTDIR/../bin-wine/$4 $DIST $WINENUMVERSION && return 0

	return 1
}

# Specially WINE@Etersoft case (use external DIST and PROJECTVERSION)
check_and_refresh_package_wine()
{
	# Etersoft/WINE@Etersoft/last/WINE/SUSE/12
	local TARGETPATH="$1"
	# get_rpm_sources will fails if target is not exists
	mkdir -p "$TARGETPATH"
	# Etersoft/WINE@Etersoft/last/sources
	local SOURCEPATH="$(get_rpm_sources "$TARGETPATH")"
	# haspd
	local BUILDNAME=$2

	test -d "$SOURCEPATH" || fatal "WINE: Source path '$SOURCEPATH' is not exists (possibly run with incorrect target path $TARGETPATH)"
	test -d "$TARGETPATH" || fatal "WINE: Target path '$TARGETPATH' is not exists"

	# FIXMEP get_..._package always returns true
	local SRCRPM=$(get_src_package "$SOURCEPATH" $BUILDNAME)
	test -r "$SRCRPM" || fatal "Source package for $BUILDNAME is not found"
	local BINPKG=$(get_bin_package "$TARGETPATH" $BUILDNAME)

	# if binary is exists
	if [ -r "$BINPKG" ] ; then
		# if binary is newer than src.rpm, return OK
		test "$BINPKG" -nt "$SRCRPM" && return 0
	fi

	[ -r "$TARGETPATH/log/$BUILDNAME.autobuild.failed" ] && fatal "Package $BUILDNAME need rebuild from $SRCRPM, but already was failed"
	$AROBOTDIR/../bin-wine/$BUILDNAME.sh $DIST $PROJECTVERSION && return 0

	touch $TARGETPATH/log/$BUILDNAME.autobuild.failed
	fatal "Package $BUILDNAME cannot rebuild from $SRCRPM"
	return 1
}

check_and_refresh_component()
{
	local BUILDSCRIPT="$1"
	# Etersoft/RX@Etersoft/last/SUSE/12
	local TARGETPATH="$2"
	# get_rpm_sources will fails if target is not exists
	mkdir -p "$TARGETPATH"
	# Etersoft/RX@Etersoft/last/sources
	local SOURCEPATH="$(get_rpm_sources "$TARGETPATH")"
	# haspd
	local BUILDNAME=$3
	local PRVERSION=$4

	if [ -z "$PRVERSION" ] ; then
		# get PROJECT version from SOURCEPATH
		PRVERSION=$(basename $(dirname $SOURCEPATH) )
	fi

	test -d "$SOURCEPATH" || fatal "Source path $SOURCEPATH is not exists (run with incorrect target path $TARGETPATH)"
	test -d "$TARGETPATH" || fatal "Target path $TARGETPATH is not exists"

	# FIXMEP get_..._package always returns true
	local SRCRPM=$(get_src_package "$SOURCEPATH" $BUILDNAME)
	test -r "$SRCRPM" || fatal "Source package for $BUILDNAME is not found"
	local BINPKG=$(get_bin_package "$TARGETPATH" $BUILDNAME)

	# if binary is exists
	if [ -r "$BINPKG" ] ; then
		# if binary is newer than src.rpm
		if [ "$BINPKG" -nt "$SRCRPM" ] ; then
			check_pkg_integrity "$BINPKG" && return 0
			warning "Package $BINPKG is broken, removing"
			rm -vf "$BINPKG"
		fi
	fi

	[ -r "$TARGETPATH/log/$BUILDNAME.autobuild.failed" ] && fatal "Package $BUILDNAME need rebuild from $SRCRPM, but already was failed"

	$AROBOTDIR/../$BUILDSCRIPT/$BUILDNAME.sh $DIST $PRVERSION && return 0

	touch $TARGETPATH/log/$BUILDNAME.autobuild.failed
	fatal "Package $BUILDNAME cannot rebuild from $SRCRPM"
	return 1
}
