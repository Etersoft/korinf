#!/bin/sh
##
#  Korinf project
#
#  Common rpm build packages in chrooted Linux system
#
#  Copyright (c) Etersoft <http://etersoft.ru> 2005, 2006, 2007, 2009
#  Copyright (c) Vitaly Lipatov <lav@etersoft.ru> 2009
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU Affero General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.

#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Affero General Public License for more details.

#  You should have received a copy of the GNU Affero General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
##

# We hope here BUILDERHOME is clean already

build_rpms()
{
	local dist
	dist=$1

	TARGET=`ROOTDIR=$BUILDROOT /usr/bin/distr_vendor -p`
	TARGETPKGDISTRO=`ROOTDIR=$BUILDROOT /usr/bin/distr_vendor -s`

	[ -z "$TARGET" ] && { warning "TARGET is empty" ; return 1 ; }


	# HACK for Gentoo
	if [ -n "$WITHOUTEBU" ] ; then
	# FIXME
	#if true ; then
		[ "$TARGET" = "tbz2" ] && TARGET=rpm
	else
		[ "$TARGET" = "tbz2" ] && TARGET=tar.bz2
	fi

	BUILDARCH=$DEFAULTARCH
	if echo $dist | grep x86_64 >/dev/null ; then
	    BUILDARCH="x86_64"
	fi

	# Use rpmbph for git repo if possible
	[ -d "$ETERBUILDDIR/functions" ] && RPMBPH=$(readlink -f $ETERBUILDDIR/functions)/../../../bin/rpmbph || RPMBPH=rpmbph

	echo "Build '$BUILDSRPM' for $dist distro"
	rm -f $BUILDERHOME/tmp/$BUILDNAME*
	if [ -n "$MAKESPKG" ] ; then
		ROOTDIR=$BUILDROOT $RPMBPH -v -n -z $BUILDSRPM
		BUILTRPM=~/$RPMSDIR
		return 0
	else
		ROOTDIR=$BUILDROOT ETERDESTSRPM=$BUILDERHOME/tmp $RPMBPH -v -n -z $BUILDSRPM
		BUILTRPM=$BUILDERHOME/$RPMSDIR
	fi

	# Get real src.rpm name
	TARGETSRPM=`basename $(echo $BUILDERHOME/tmp/$BUILDNAME*.src.rpm | head -n1)`
	[ -r "$BUILDERHOME/tmp/$TARGETSRPM" ] || { warning "Can't read target $TARGETSRPM src.rpm in $BUILDERHOME/tmp" ; return 1 ; }
	$SUDO chown $LOCUSER $BUILDERHOME/tmp/$TARGETSRPM

	# create needed files in home directory
	init_home
	INTBUILT=/home/$INTUSER/$RPMSDIR

	# FIXME: problem if system's rpm does not recognize our src.rpm (as Mandriva 2007.1/2008)
	RPMBUILDROOT="/home/$INTUSER/tmp/$BUILDNAME-buildroot"
	RPMBUILDNODEPS=""
	[ "$TARGET" != "rpm" ] && RPMBUILDNODEPS="--nodeps"
	CMDBUILD="rpmbuild -v --rebuild $RPMBUILDNODEPS --buildroot $RPMBUILDROOT /home/$INTUSER/tmp/$TARGETSRPM"
	CMDAFTERBUILD="cat ~/$RPMSDIR/../BUILD/${BUILDNAME}*/config.h ; cat ~/$RPMSDIR/../BUILD/${BUILDNAME}*/include/config.h"
	if [ "$INSTALLREQUIREDPACKAGE" ] ; then
		install_req
		return $?
	fi

	# Control file for check build result
        LOGFAILFILE="$BUILDERHOME/RPM/log/$BUILDNAME.log.failed"
	rm -f "$LOGFAILFILE"

	echo "Chrooting as $INTUSER and run $CMDBUILD command in $BUILDARCH system"
	$NICE setarch $BUILDARCH $SUDO chroot $BUILDROOT \
		su - $INTUSER -c "export LANG=C ; export LC_ALL=C ; umask 002 ; mkdir -p ~/RPM/log ; $CMDBUILD || touch ~/RPM/log/$BUILDNAME.log.failed ; $CMDAFTERBUILD"
	[ -r "$LOGFAILFILE" ] && { rm -f "$LOGFAILFILE" ; warning "build failed" ; return 1 ; }

	# Workaround again flow target dirs
	pushd $BUILTRPM || { warning "can't chdir to $BUILTRPM" ; return 1; }
	test -d i586 && mv -f i586/* ./
	test -d x86_64 && mv -f x86_64/* ./
	test -d noarch && mv -f noarch/* ./
	popd
	return 0
}


convert_by_target()
{
	local RELPKG=$PACKAGERELEASE$TARGETPKGDISTRO
	local RES=0
	case $TARGET in
	"deb")
		# Debian/Ubuntu
		fakeroot setarch $BUILDARCH alien --keep-version --scripts --veryverbose --to-$TARGET *${BUILDNAME}*.rpm || { warning "alien problem with deb"; RES=1 ; }
		;;
	"tgz")
		# Slackware
		fakeroot alien --keep-version --veryverbose --to-$TARGET *${BUILDNAME}*.rpm || { warning "alien problem with tgz"; RES=1 ; }
		for i in *${BUILDNAME}*.tgz ; do test -r "$i" && mv $i `basename $i .tgz`-$RELPKG.tgz ; done
		;;
	"tar.gz")
		# ArchLinux
		fakeroot alien --keep-version --veryverbose --to-tgz *${BUILDNAME}*.rpm || { warning "alien problem with tar.gz"; RES=11 ; }
		for i in *${BUILDNAME}*.tgz ; do test -r "$i" && mv $i `basename $i .tgz`-$RELPKG.tar.gz ; done
		;;
	*)
		fatal "unknown $TARGET"
	esac
	return $RES
}

# Only with $TARGET
convert_rpm()
{
	local RELPKG=$PACKAGERELEASE$TARGETPKGDISTRO.$BUILDARCH
	local RES=0
	pushd $BUILTRPM
	ls -l
	echo "Make target packages for $TARGET ($TARGETPKGDISTRO)"

	case $TARGETPKGDISTRO in
		"gentoo")
			# Gentoo
			fakeroot alien --keep-version --veryverbose --to-tgz *${BUILDNAME}*.rpm || { warning "alien problem with tbz2"; RES=11 ; }
			for i in *${BUILDNAME}*.tgz ; do
				local TARBNAME=`basename $i .tgz`
				cat "$i" | gunzip -c | bzip -c > "$TARBNAME-$RELPKG.tar.bz2" || { warning "can't repack files" ; RES=11 ; }
				rm -f "$i"
			done
			;;
		*)
			convert_by_target
			RES=$?
	esac


	popd
	return $RES
}

