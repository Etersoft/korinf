#!/bin/sh
##
#  Korinf project
#
#  Common rpm build packages in chrooted Linux system
#
#  Copyright (c) Etersoft <http://etersoft.ru> 2005, 2006, 2007, 2009
#  Copyright (c) Vitaly Lipatov <lav@etersoft.ru> 2009
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU Affero General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.

#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Affero General Public License for more details.

#  You should have received a copy of the GNU Affero General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
##

# We hope here BUILDERHOME is clean already

kormod buildargs
load_mod repl

check_alien()
{
    if (alien -h 2>&1 | grep -qws "depends" ); then
	return 0
    else
	warning "Error: `alien -V` not support \"--depends\" option..."
	return 1
    fi
}

convert_rpm_to_target()
{
	local dist=$1
	local ROOTDIR=$BUILDROOT
	[ -n "$ROOTDIR" ] || ROOTDIR="/var/empty"

	# FIXME: when build to remote dist, we need generic src.rpm
	echo "Convert '$BUILDSRPM' for $dist distro"
	rm -f $BUILDERHOME/tmp/$BUILDNAME*
	if [ -n "$MAKESPKG" ] ; then
		ROOTDIR=$ROOTDIR DEFAULTARCH=$BUILDARCH $RPMBPH -v -n -z $BUILDSRPM
		BUILTRPM=~/$RPMSDIR
		return 0
	else
		ROOTDIR=$ROOTDIR DEFAULTARCH=$BUILDARCH ETERDESTSRPM=$BUILDERHOME/tmp $RPMBPH -v -n $BUILDSRPM
		BUILTRPM=$BUILDERHOME/$RPMSDIR
	fi

	# Get real src.rpm name
	TARGETSRPM=$(echo $BUILDERHOME/tmp/$BUILDNAME*.src.rpm | head -n1)
	[ -r "$TARGETSRPM" ] && [ -f "$TARGETSRPM" ] || { warning "Can't read target $TARGETSRPM src.rpm" ; return 1 ; }
	$SUDO chown $LOCUSER $TARGETSRPM

	return 0
}

set_target_var()
{
	[ -r "$BUILDROOT" ] || { warning "BUILDROOT is empty" ; return 1; }
	TARGET=`ROOTDIR=$BUILDROOT /usr/bin/distr_vendor -p`
	TARGETPKGDISTRO=`ROOTDIR=$BUILDROOT /usr/bin/distr_vendor -s`

	[ -z "$TARGET" ] && { warning "TARGET is empty" ; return 1 ; }

	[ "$TARGETPKGDISTRO" = "gentoo" ] || return 0

	# HACK for Gentoo
	if [ -n "$BOOTSTRAP" ] ; then
		[ "$TARGET" = "tbz2" ] && TARGET=rpm
	else
		[ "$TARGET" = "tbz2" ] && TARGET=tar.bz2
	fi
	return 0
}

build_rpms()
{
	local dist=$1

	# create needed files in home directory
	init_home
	INTBUILT=/home/$INTUSER/$RPMSDIR

	RPMARGS="$(get_rpm_args $dist $BUILDNAME)"

	echo "Build '$BUILDSRPM' for $dist distro with args '$RPMARGS'"
	# FIXME: problem if system's rpm does not recognize our src.rpm (as Mandriva 2007.1/2008)
	RPMBUILDROOT="/home/$INTUSER/tmp/$BUILDNAME-buildroot"

	RPMBUILDNODEPS=""
	# Skip buildreqs checking on non RPM systems
	[ "$TARGET" = "rpm" ] || RPMBUILDNODEPS="--nodeps"
	# hack: we set target to rpm before for Gentoo
	[ "$TARGETPKGDISTRO" = "gentoo" ] && RPMBUILDNODEPS="--nodeps"

	# TODO: we need do strip with some rpm rule? or during binary rpm converting
	# --without debug is wine only hack
	DISABLEDEBUGFLAG=""
	[ "$TARGET" = "rpm" ] || DISABLEDEBUGFLAG="--without debug"
	[ "$ALLOWPUBLICDEBUG" = "1" ] || DISABLEDEBUGFLAG="--without debug"

	CMDBUILD="rpmbuild -v --rebuild $RPMBUILDNODEPS "$RPMARGS" $DISABLEDEBUGFLAG --define='_unpackaged_files_terminate_build 0' --buildroot $RPMBUILDROOT /home/$INTUSER/tmp/$(basename $TARGETSRPM) --target $BUILDARCH"
	CMDAFTERBUILD="cat ~/tmp/rpm-tmp.* ; cat ~/$RPMSDIR/../BUILD/${BUILDNAME}*/config.log; cat ~/$RPMSDIR/../BUILD/${BUILDNAME}*/config.h ; cat ~/$RPMSDIR/../BUILD/${BUILDNAME}*/include/config.h"

	# Control file for check build result
        LOGFAILFILE="$BUILDERHOME/RPM/log/$BUILDNAME.log.failed"
	rm -f "$LOGFAILFILE" "$LOGFAILFILE.clog"

	echo "Chrooting as $INTUSER and run $CMDBUILD command in $BUILDARCH system"
	$NICE setarch $BUILDARCH $SUDO chroot $BUILDROOT \
		su - $INTUSER -c "export LANG=C ; export LC_MESSAGES=C ; umask 002 ; mkdir -p ~/RPM/log ; rm -f ~/tmp/rpm-tmp.* ; $CMDBUILD || touch ~/RPM/log/$BUILDNAME.log.failed ; ( $CMDAFTERBUILD ) >~/RPM/log/$BUILDNAME.log.failed.clog "

	if [ -r "$LOGFAILFILE" ] ; then
		rm -f "$LOGFAILFILE" ; warning "build failed"
		[ -r "$LOGFAILFILE.clog" ] && mv "$LOGFAILFILE.clog" "${LOGFILE/.log/.conf.log}"
		return 1
	fi

	# Workaround again flow target dirs
	pushd $BUILTRPM || { warning "can't chdir to $BUILTRPM" ; return 1; }
	test -d i586 && mv -f i586/* ./
	test -d x86_64 && mv -f x86_64/* ./
	test -d noarch && mv -f noarch/* ./
	popd
	return 0
}


run_alien()
{
	local VERBCOMMAND=
	[ -n $ADEBUG ] && VERBCOMMAND="--veryverbose"
	BUILDARCH=$BUILDARCH CC=$KORINFDIR/korinf/helpers/gcc-stub-dumpmachine fakeroot setarch $BUILDARCH alien --keep-version $VERBCOMMAND $@ || return
	# don't remove original due using rpm after converting (f.i. for Gentoo)
}

# Converts ALT Linux Sisyphus dependencies to TARGET notation
# needs TARGETPATH, distr_ver, BUILDARCH, TARGET, BUILDROOT
convert_deplist()
{
	local depf
	#depf=$(rpm -qp --queryformat "%{NAME}" $1)
	depf=$(get_pkgname_from_filename $(basename $1))
	local depfile=$TARGETPATH/ALTLinux/Sisyphus/log/$depf.rpm.depends
	if [ ! -s $depfile ]; then
		warning "Cannot locate '$depfile' file"
		return 1
	fi
	listdep=`cat $depfile | sort -u`
	# FIXME: some rootless translation?
	local vendor=`ROOTDIR=$BUILDROOT /usr/bin/distr_vendor -s`
	# needs DISTRVERSION, DEFAULTARCH, VENDOR, TARGET
	# Example: 12.10 i586 ubuntu deb
	repl_list=`VENDOR=$vendor DEFAULTARCH=$BUILDARCH DISTRVERSION=$dist_ver print_pkgrepl_list`
	alert "Used replacement file order: $repl_list"
	for j in $listdep; do
		tolocal_anyrepl ${j} ${repl_list} && echo "$TARGETPKGNAME" || echo $j
	done | sort -u
}

convert_by_target()
{
	local RELPKG=$PACKAGERELEASE$TARGETPKGDISTRO
	local RES=0
	local DEPPARAM=""

	local PACKAGESLIST="$EXPRPMMAINFILES $EXPRPMEXTRAFILES"
	echo "Packages to convert: $PACKAGESLIST"
	if [ -n "$PACKAGESLIST" ] ; then
		for i in $PACKAGESLIST ; do
			if [ -e $i ] ; then
				local depf=$(get_pkgname_from_filename $i)
				# FIXME: write separate convert_by_target
				if [ "$TARGET" = "deb" ] ; then
				if convert_deplist $i | tee $DESTDIR/log/$depf.deb.depends ; then
					if check_alien ; then
						DEPPARAM="--depends $DESTDIR/log/${depf}.deb.depends"
						alert "Call alien with ${DEPPARAM}";
					fi
				else
					rm -f $DESTDIR/log/$depf.deb.depends
				fi
				fi
				run_alien --scripts --to-$TARGET ${DEPPARAM} $i || { warning "alien problem with $TARGET"; RES=1 ; return $RES ; }
			else
				warning "Package $i missing check $DESTDIR"
			fi
		done
	else
		fatal "Empty packages list for alien"
	fi

	# Hack for tgz packages
	# FIXME: will broken with package without BUILDNAME inside
	if [ $TARGET == "tgz" ] ; then
	    for i in *${BUILDNAME}*.tgz ; do test -r "$i" && mv $i `basename $i .tgz`-$RELPKG.tgz ; done
	fi

	if [ $TARGET != "deb" ] && [ $TARGET != "tgz" ] ; then
		fatal "unknown $TARGET"
	fi
	return $RES
}

# Only with $TARGET
convert_rpm()
{
	local RELPKG=$PACKAGERELEASE$TARGETPKGDISTRO.$BUILDARCH
	local RES=0
	pushd $BUILTRPM
	ls -l
	echo "Make target packages for $TARGET ($TARGETPKGDISTRO)"

	case $TARGETPKGDISTRO in
		"gentoo")
			# Gentoo
			convert_gentoo || fatal "Cannot convert for Gentoo"
			echo "Generate ebuild"
			gen_ebuild
			;;
		"archlinux")
			# ArchLinux
			convert_archlinux
			;;
		*)
			convert_by_target
			RES=$?
	esac

	popd
	return $RES
}

