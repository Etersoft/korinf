#!/bin/sh
##
#  Korinf project
#
#  Check for package requires is present in distro
#
#  Copyright (c) Etersoft <http://etersoft.ru> 2012
#  Copyright (c) Vitaly Lipatov <lav@etersoft.ru> 2012
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU Affero General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.

#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Affero General Public License for more details.

#  You should have received a copy of the GNU Affero General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
##

kormod filelist log
load_mod rpm

try_install_by_list()
{
	local dist=$1
	shift
	echo
	echo "=========================="
	echo "Simulate install for $dist"
	cd ../tools/run-script
	./run-script.sh $dist checkreqs "$@"
	local RES=$?
	cd -
	return $RES
}

# FIXME: move to common funcs
# args: dir mask
expand_mask_in_dir()
{
	local tdir=$1
	shift
	local i
	for i in $@ ; do
		echo $tdir/$i
	done
}

# get package names extact from real names
# internal
# Note: I think it is the same like MAINFILES and EXTRAFILES
get_real_package_names()
{
	local j
	for j in $(expand_mask_in_dir $DESTDIR $EXPMAINFILES) $(expand_mask_in_dir $DESTDIR/extra $EXPEXTRAFILES) ; do
		get_pkgname_from_filename $j
	done
}

# args: dist file reqs
print_check_reqs_item()
{
	local dist=$1
	local fname=$(basename $2)
	shift 2
	local reqs=$@

	if [ "$CHECKREQUIRES" = "-R" ] ; then
		printf "* %s: %s" "$fname" "$(echo $reqs)"
		[ -z "$reqs" ] && skipped && echo && continue
		echo
		try_install_by_list $dist "$reqs" && success || failure
		echo
	else
		printf "  * %60s: " "$fname"
		[ -z "$reqs" ] && skipped && echo && continue
		try_install_by_list $dist "$reqs" >/dev/null 2>&1 && success || failure
		echo
	fi
}


# check package existing by REBUILDLIST
# used: TARGETPATH REBUILDLIST
check_package_requires()
{
	local BUILDNAME=$1
	local reqs

	echo "Note: we do not use info from built packages, only check if file is exists"

	for dist in $(get_distro_list $REBUILDLIST) ; do
		DESTDIR="$TARGETPATH/$dist"
		test -L "$DESTDIR" && continue

		# fills $BUILDARCH, $DISTRNAME, $DISTRVERSION
		parse_dist_name $dist
		[ -z "$DISTRNAME" ] && fatal "Empty DISTRNAME for $dist"

		# hack to skip ALT checking
		[ "$DISTRNAME" = "ALTLinux" ] && continue

		# fills $PKGFORMAT, $PKGVENDOR, $RPMVENDOR
		set_target_var
		prepare_filelist
		[ "$CHECKREQUIRES" = "-R" ] && echo "====================="
		printf "%-20s\n" "$BUILDARCH/$DISTRNAME/$DISTRVERSION"

		local pkgnames="$(get_real_package_names)"
		# first print about source package
		reqs=$(get_rpmpkg_requires -p $BUILDSRPM)
		reqs=$(convert_pkgreqs_to_target $reqs)
		reqs=$(do_exclude_list "$pkgnames" "$reqs")
		print_check_reqs_item $dist $BUILDSRPM $reqs
		# FIXME: use pkgnames instead expand_mask_in_dir?
		for j in $(expand_mask_in_dir $DESTDIR $EXPMAINFILES) $(expand_mask_in_dir $DESTDIR/extra $EXPEXTRAFILES) ; do
			[ -r "$j" ] || continue
			pkgname=$(get_pkgname_from_filename $j)
			reqs=$(get_target_deplist $pkgname)
			reqs=$(do_exclude_list "$pkgnames" "$reqs")
			print_check_reqs_item $dist $j $reqs
		done
	done
}

# used DESTDIR, dist, EXPMAINFILES, EXPEXTRAFILES
test_package_requirements()
{
	local pkgname
	local pkgnames="$(get_real_package_names)"
	for pkgname in $pkgnames ; do
		reqs=$(get_target_deplist $pkgname)
		reqs=$(do_exclude_list "$pkgnames" "$reqs")
		try_install_by_list $dist "$reqs" || return
	done
}
