#!/bin/bash
##
#  Korinf project
#
#  Main build cycle functions
#
#  Copyright (c) Etersoft <http://etersoft.ru> 2005, 2006, 2007, 2009
#  Copyright (c) Vitaly Lipatov <lav@etersoft.ru> 2009
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU Affero General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.

#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Affero General Public License for more details.

#  You should have received a copy of the GNU Affero General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
##

kormod mount copying install log
kormod distro check_built

mainbuild()
{
local BUILTLOGFILE=$ALOGDIR/distrobuilt.log
local RES=0
rm -f $BUILTLOGFILE
for dist in $(get_distro_list $REBUILDLIST) ; do

	# FIXME: add i586 support
	#dist is x86_64/Name/Version or Name/Version
	echo $dist >>$BUILTLOGFILE

	# fill after hasher
	BUILTBINPKGLIST=

	# Set target dir for built packages
	DESTDIR=$TARGETPATH/$dist

	# FIXME: will do LINKED local var?
	LINKED=$(get_linked_system $dist)
	if [ -n "$LINKED" ] ; then
		if [ ! -L "$DESTDIR" ] && [ -d "$DESTDIR" ] ; then
			warning "Removing target dir for replace to link"
			rm -rfv "$DESTDIR" && success
		fi
		if [ -L "$DESTDIR" ] ; then
			# TODO: check linking
			#logit "Link $dist to $(readlink $DESTDIR) already exists" SKIPPED
			if [ $(readlink "$DESTDIR") != "../$LINKED" ] ; then
				warning "Overwrite existed link $(readlink $DESTDIR) to ../$LINKED"
				rm -rfv "$DESTDIR"
			else
				logit "Linked to $(readlink $DESTDIR)" SKIPPED
			fi
		fi
		if [ ! -L "$DESTDIR" ] ; then
			mkdir -p $(dirname "$DESTDIR")
			ln -s ../$LINKED $DESTDIR
			logit "Create link $dist to $LINKED" PASSED
		fi
		# replace dist with linked
		dist=$LINKED
		# Set target dir for built packages
		DESTDIR=$TARGETPATH/$dist
		# if already built
		grep -q $dist $BUILTLOGFILE && continue
	fi

	# Set target URL for get tarballs or checking
	DESTURL=$(echo $DESTDIR | sed -e "s|$FTPDIR/|$PUBLICURL/|g")

	# skip linked destination (TODO: do not handle it at all)
	[ -L "$DESTDIR" ] && warning "$dist: Does not support linked target ($DESTDIR), translate it in etc/linked or remove link" && continue

	# FIXME: Hack
	[ "$TARGETPRIVPATH" ] && DESTDIR=$TARGETPRIVPATH

	# fills $BUILDARCH, $DISTRNAME, $DISTRVERSION
	parse_dist_name $dist
	[ -z "$DISTRNAME" ] && fatal "Empty DISTRNAME for $dist"

	# fills $PKGFORMAT, $PKGVENDOR, $RPMVENDOR
	set_target_var

	# Initialize LOGDIR and LOGFILE variables
	init_dist_log "$dist"

	if [ -n "$FORCEREBUILDPACKAGE" ] || [ -n "$INSTALLREQUIREDPACKAGE" ] ; then
		logit "force build packages"
	else 
		if [ -n "$REBUILDPACKAGE" ] ; then
			logit "force build failed packages $BUILDNAME"
		elif [ -r "$DESTDIR/log/$BUILDNAME.build.failed" ] ; then
			logit "build already was broken in manual build" SKIPPED
			echo "`date` $BUILDNAME on $dist ALREADY FAILED" | write_report
			RES=1
			continue
		fi

		if do_need_build_package $BUILDNAME ; then
			logit "package $BUILDNAME"
		else
			logit "$BUILDNAME is up-to-date" SKIPPED
			# remove fatal flag if checking is passed
			rm -fv "$DESTDIR/log/$BUILDNAME.autobuild.failed"
			rm -fv "$DESTDIR/log/$BUILDNAME.build.failed"
			echo `date` $BUILDNAME on $dist PASSED | write_report
			continue
		fi
	fi

	# Clean log
	reset_dist_log "$dist"

	# Expand MAINFILELIST, EXTRAFILELIST
	prepare_filelist

	# Run build and check result
	if build_dist_pkg ; then
		logit "copying log" copying_log || fatal "Can't copying log"
	else
		[ -z "$INSTALLREQUIREDPACKAGE" ] && logit "copying sources of broken package" copying_sources

		# Get error, umount if do not need debug
		if [ -z "$ADEBUG" ] ; then
			logit "umount" end_umount
		fi

		logit "copying log from broken build" copying_log
		touch "$DESTDIR/log/$BUILDNAME.build.failed"

		# Stop immediately if we in auto build
		if [ -n "$NIGHTBUILD" ] ; then
			echo `date` $BUILDNAME on $dist FATAL | write_report
			fatal "Fatal autobuild"
		fi
		RES=1
	fi

	echo `date` $BUILDSRPM on $dist DONE | write_report
done

return $RES
}
